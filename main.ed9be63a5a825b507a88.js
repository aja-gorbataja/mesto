(()=>{"use strict";class e{constructor(e,t,s,r,i,n){this._data=e,this._name=e.name,this._link=e.link,this._cardId=e._id,this._ownerId=e.owner._id,this._userId=n,this._likes=e.likes,this._templateSelector=t,this._handleOpenPopup=s,this._deleteCard=r,this._likeCard=i,this._like=!1,this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".elements__item-img"),this._cardTitle=this._element.querySelector(".elements__item-name"),this._cardLike=this._element.querySelector(".elements__item-like"),this._cardRemove=this._element.querySelector(".elements__item-trash"),this._likesNumber=this._element.querySelector(".elements__item-numbers")}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".elements__item").cloneNode(!0)}generateCard(){return this._setEventListeners(),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._likesNumber.textContent=this._likes.length,this._userId!==this._ownerId&&this._cardRemove.remove(),this._cardId.like?this._cardLike.classList.add("elements__item-like_on"):this._cardLike.classList.remove("elements__item-like_on"),this._element}_setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._handleOpenPopup(this._name,this._link)})),this._cardLike.addEventListener("click",(()=>{this._likeCard(this)})),this._cardRemove.addEventListener("click",(()=>{this._deleteCard(this)}))}get like(){return this._like}toggleLike(){this._like=!this._like}countLikes(e){this._likes=e,this._likesNumber.textContent=this._likes.length}handleLike(){this._cardLike.classList.toggle("elements__item-like_on")}handleTrash(){this._element.remove()}}class t{constructor(e){this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".popup-close")}openPopup(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}closePopup(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.closePopup()};setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.closePopup()})),this._popup.addEventListener("mousedown",(e=>{e.currentTarget===e.target&&this.closePopup()}))}}class s extends t{constructor(e,{formSubmit:t}){super(e),this._formSubmit=t,this._form=this._popup.querySelector(".popup__form"),this._inputList=this._form.querySelectorAll(".popup__input")}setLoadingText(e){this._popup.querySelector(".popup__button").textContent=e}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._formSubmit(this._getInputValues()),this.closePopup()})),super.setEventListeners()}closePopup(){super.closePopup(),this._form.reset()}}class r{constructor({data:e,renderer:t},s){this._renderedItems=e,this._renderer=t,this._container=document.querySelector(s)}addItem(e){this._container.prepend(e)}renderItem(){this._renderedItems.forEach((e=>{this._renderer(e)}))}}class i{constructor(e,t){this._config=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);t.classList.remove(this._config.errorClass),t.textContent="",e.classList.remove(this._config.inputErrorClass)}_showInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);t.classList.add(this._config.errorClass),t.textContent=e.validationMessage,e.classList.add(this._config.inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this.disableButton():(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}deleteErrors(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}disableButton(){this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0}enableValidation(){this._setEventListeners()}}const n=e=>e.ok?e.json():Promise.reject(new Error("Произошла ошибка")),o=document.querySelector(".profile__info-edit"),a=document.querySelector(".profile__add"),l=document.querySelector(".form__input-name"),h=document.querySelector(".form__input-description"),u=document.querySelector(".form__input-avatar"),d=document.querySelector(".profile__info-name"),c=document.querySelector(".profile__info-description"),_=document.querySelector(".profile__avatar");let p;const m=new class{constructor(e){this.url=e.url,this.headers=e.headers}getCards(){return fetch(`${this.url}/cards`,{method:"GET",headers:this.headers}).then(n)}createCard(e){return fetch(`${this.url}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:e.name,link:e.link})}).then(n)}getOwnerInfo(){return fetch(this.url+"/users/me",{method:"GET",headers:this.headers}).then(n)}editProfile(){return fetch(`${this.url}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:data.name,about:data.about})}).then(n)}editAvatar(e){return fetch(`${this.url}/users/me/avatar`,{headers:this.headers,method:"PATCH",body:JSON.stringify({avatar:e.avatar})}).then(n)}deleteCard(e){return fetch(`${this.url}/cards/${e}`,{method:"DELETE",headers:this.headers}).then(n)}addLike(e){return fetch(`${this.url}/cards/${e}/likes`,{method:"PUT",headers:this.headers}).then(n)}deleteLike(e){return fetch(`${this.url}/cards/${e}/likes`,{method:"DELETE",headers:this.headers}).then(n)}}({url:"https://mesto.nomoreparties.co/v1/cohort-60",headers:{authorization:"a7d13795-b751-49db-aed9-35354fa7b32f","Content-Type":"application/json"}});m.getCards().then((e=>{const t=new r({data:e,renderer:e=>{const s=v(e);t.addItem(s)}},".elements");t.renderItem(e)})),m.getOwnerInfo().then((e=>{f.setUserInfo(e),f.setUserAvatar(e),f.getOwnerId(e._id),p=e._id}));const f=new class{constructor({name:e,about:t,avatar:s,_id:r}){this._name=e,this._about=t,this._avatar=s,this._id=r}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserInfo(e){this._name.textContent=e.name,this._about.textContent=e.about}setUserAvatar(e){this._avatar.src=e.avatar}getOwnerId(){return this._id}}({name:d,about:c,avatar:_}),g=new r({data:[],renderer:e=>{const t=v(e);g.addItem(t)}},".elements");function v(t){return new e(t,".item",E,S,k,p).generateCard()}const L=new s(".popup_add",{formSubmit:e=>{L.setLoadingText("Сохранение..."),m.createCard(e).then((e=>{!function(e){const t=v(e);g.addItem(t)}(e)})).catch((e=>{console.log(e)}))}});function E(e,t){I.openPopup(e,t)}function k(e){e.like?m.deleteLike(e._cardId).then((t=>{e.countLikes(t.likes),e.toggleLike(),e.handleLike()})).catch((e=>{console.log(e)})):m.addLike(e._cardId).then((t=>{e.countLikes(t.likes),e.toggleLike(),e.handleLike()})).catch((e=>{console.log(e)}))}L.setEventListeners(),a.addEventListener("click",(()=>{q["form-add"].deleteErrors(),q["form-add"].disableButton(),L.openPopup()}));const b=new class extends t{constructor(e,{formSubmit:t}){super(e),this._formSubmit=t,this._buttonConfirm=this._popup.querySelector(".popup__button")}setLoadingText(e){this._buttonConfirm.textContent=e}setEventListeners(){super.setEventListeners(),this._buttonConfirm.addEventListener("click",(()=>{this._formSubmit(this._card),this.closePopup()}))}handleCard(e){this._card=e}}(".popup_ask",{formSubmit:e=>{b.setLoadingText("Удаление..."),m.deleteCard(e._cardId).then((()=>{e.handleTrash()})).catch((e=>{console.log(e)}))}});function S(e){b.handleCard(e),b.openPopup()}b.setEventListeners();const y=new s(".popup_edit",{formSubmit:e=>{y.setLoadingText("Сохранение..."),m.editProfile(e).then((e=>{f.setUserInfo(e,{name:l,about:h})})).catch((e=>{console.log(e)}))}});o.addEventListener("click",(()=>{y.setInputValues(f.getUserInfo()),q["form-edit"].deleteErrors(),q["form-edit"].disableButton(),y.openPopup()})),y.setEventListeners();const I=new class extends t{constructor(e){super(e),this._imgFull=this._popup.querySelector(".img__full"),this._imgTitle=this._popup.querySelector(".img__title")}openPopup(e,t){super.openPopup(),this._imgFull.src=t,this._imgFull.alt=e,this._imgTitle.textContent=e}}(".popup_img"),C=new s(".popup_avatar",{formSubmit:e=>{C.setLoadingText("Сохранение..."),m.editAvatar(e).then((e=>{f.setUserAvatar(e,{avatar:u})})).catch((e=>{console.log(e)}))}});C.setEventListeners(),document.querySelector(".profile__avatar").addEventListener("click",(()=>{C.openPopup()})),I.setEventListeners();const q={};var P;P={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_visible"},Array.from(document.querySelectorAll(P.formSelector)).forEach((e=>{const t=new i(P,e),s=e.getAttribute("name");q[s]=t,t.enableValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,